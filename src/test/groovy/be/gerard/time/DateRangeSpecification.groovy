package be.gerard.time

import spock.lang.Specification
import spock.lang.Title

import java.time.LocalDate
import java.time.YearMonth
import java.time.temporal.ChronoUnit

import static be.gerard.time.DateRangeTestUtils.*
import static org.assertj.core.api.Assertions.assertThat

@Title("DateRange")
class DateRangeSpecification extends Specification {

    def "parse"() {

        when:
        final DateRange range = DateRange.parse(rangeAsString)

        then:
        assertThat(range).isEqualTo(expectedRange)

        where:
        rangeAsString            | expectedRange
        "0000-01-01"             | DateRange.ofOneDay(LocalDate.of(0, 1, 1))
        "0000-01-01.."           | DateRange.startingOn(LocalDate.of(0, 1, 1))
        "0000-01-01..9999-12-31" | DateRange.of(LocalDate.of(0, 1, 1), LocalDate.of(9999, 12, 31))

        "2000-01-01"             | DateRange.ofOneDay(LocalDate.of(2000, 1, 1))
        "2000-01-01.."           | DateRange.startingOn(LocalDate.of(2000, 1, 1))
        "2000-01-01..2000-12-31" | DateRange.of(LocalDate.of(2000, 1, 1), LocalDate.of(2000, 12, 31))

    }

    def "is one day / is finite"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)

        when:
        final boolean isOneDay = range.isOneDay()
        final boolean isFinite = range.isFinite()

        then:
        assertThat(isOneDay).isEqualTo(expectedOneDayness)
        assertThat(isFinite).isEqualTo(expectedFiniteness)

        where:
        rangeAsString            | expectedOneDayness | expectedFiniteness
        "2000-01-01"             | true               | true
        "2000-01-01..2000-01-03" | false              | true
        "2000-01-01.."           | false              | false

    }

    def "length"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)

        when:
        final long length = range.length()

        then:
        assertThat(length).isEqualTo(expectedLength)

        where:
        rangeAsString            | expectedLength
        "2000-01-01"             | 1
        "2000-01-01..2000-01-03" | 3
        "2000-01-01..2000-01-04" | 4
        "2000-01-01.."           | Long.MAX_VALUE

    }

    def "contains day"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)
        final LocalDate day = LocalDate.parse(dayAsString)

        when:
        final boolean contains = range.containsDay(day)

        then:
        assertThat(contains).isEqualTo(isContained)

        where:
        rangeAsString            | dayAsString  | isContained
        "2000-01-01"             | "2000-01-01" | true
        "2000-01-01"             | "2000-01-02" | false
        "2000-01-01..2000-01-31" | "2000-01-02" | true
        "2000-01-01..2000-01-31" | "2000-02-01" | false
        "2000-01-01.."           | "2000-01-02" | true
        "2000-01-01.."           | "1999-12-31" | false

    }

    def "contains range"() {

        given:
        final DateRange range1 = DateRange.parse(range1AsString)
        final DateRange range2 = DateRange.parse(range2AsString)

        when:
        final boolean intersects = range1.containsRange(range2)

        then:
        assertThat(intersects).isEqualTo(isContained)

        where:
        range1AsString           | range2AsString           | isContained
        "2000-01-02.."           | "2000-01-01.."           | false
        "2000-01-02.."           | "2000-01-02.."           | true
        "2000-01-02.."           | "2000-01-03.."           | true

        "2000-01-02"             | "2000-01-01"             | false
        "2000-01-02"             | "2000-01-02"             | true
        "2000-01-02"             | "2000-01-03"             | false

        "2000-01-03..2000-01-06" | "2000-01-01..2000-01-02" | false
        "2000-01-03..2000-01-06" | "2000-01-02..2000-01-04" | false
        "2000-01-03..2000-01-06" | "2000-01-03..2000-01-06" | true
        "2000-01-03..2000-01-06" | "2000-01-04..2000-01-05" | true
        "2000-01-03..2000-01-06" | "2000-01-05..2000-01-06" | true
        "2000-01-03..2000-01-06" | "2000-01-05..2000-01-07" | false
        "2000-01-03..2000-01-06" | "2000-01-07..2000-01-08" | false

        "2000-01-03..2000-01-05" | "2000-01-01..2000-01-10" | false
        "2000-01-01..2000-01-05" | "2000-01-03..2000-01-10" | false
        "2000-01-03..2000-01-10" | "2000-01-01..2000-01-05" | false

        "2000-01-03..2000-01-06" | "2000-01-02"             | false
        "2000-01-03..2000-01-06" | "2000-01-03"             | true
        "2000-01-03..2000-01-06" | "2000-01-04"             | true
        "2000-01-03..2000-01-06" | "2000-01-05"             | true
        "2000-01-03..2000-01-06" | "2000-01-06"             | true
        "2000-01-03..2000-01-06" | "2000-01-07"             | false

        "2000-01-03.."           | "2000-01-01..2000-01-02" | false
        "2000-01-03.."           | "2000-01-01..2000-12-31" | false
        "2000-01-03.."           | "2000-01-03..2000-01-06" | true
        "2000-01-03.."           | "2000-01-04..2000-01-07" | true

        "2000-01-03.."           | "2000-01-02"             | false
        "2000-01-03.."           | "2000-01-03"             | true
        "2000-01-03.."           | "2000-01-04"             | true

    }

    def "is intersecting with"() {

        given:
        final DateRange range1 = DateRange.parse(range1AsString)
        final DateRange range2 = DateRange.parse(range2AsString)

        when:
        final boolean intersects = range1.isIntersectingWith(range2)

        then:
        assertThat(intersects).isEqualTo(isIntersecting)

        where:
        range1AsString           | range2AsString           | isIntersecting
        "2000-01-01.."           | "2000-01-01.."           | true
        "2000-01-01.."           | "2000-01-02.."           | true

        "2000-01-01"             | "2000-01-01"             | true
        "2000-01-01"             | "2000-01-02"             | false

        "2000-01-01..2000-01-10" | "2000-01-03..2000-01-04" | true
        "2000-01-03..2000-01-05" | "2000-01-01..2000-01-10" | true
        "2000-01-01..2000-01-05" | "2000-01-03..2000-01-10" | true
        "2000-01-03..2000-01-10" | "2000-01-01..2000-01-05" | true

    }

    def "find used intersections"() {

        when:
        final List<DateRange> intersections = DateRange.findUsedIntersections(ranges(dateRanges))

        then:
        assertThat(intersections).containsExactlyElementsOf(ranges(expectedIntersections))

        where:
        dateRanges                                           | expectedIntersections                                                          | comment
        []                                                   | []                                                                             | ""
        // INPUT:
        // |
        // EXPECTED:
        // |
        ["2000-01-01"]                                       | ["2000-01-01"]                                                                 | ""
        // INPUT:
        // |------------
        // EXPECTED:
        // |------------
        ["2000-01-01.."]                                     | ["2000-01-01.."]                                                               | ""
        ["2000-01-01..2000-01-02"]                           | ["2000-01-01..2000-01-02"]                                                     | ""
        // INPUT:
        // |-|
        // EXPECTED:
        // |-|
        ["2000-01-01..2000-01-07"]                           | ["2000-01-01..2000-01-07"]                                                     | ""
        // INPUT:
        // |-------|
        // EXPECTED:
        // |-------|
        ["2000-01-01..2000-01-07"]                           | ["2000-01-01..2000-01-07"]                                                     | ""
        // INPUT:
        // |-------|
        //      |-------|
        // EXPECTED:
        // |----|--|----|
        ["2000-01-01..2000-01-07", "2000-01-04..2000-01-10"] | ["2000-01-01..2000-01-03", "2000-01-04..2000-01-07", "2000-01-08..2000-01-10"] | ""
        // INPUT:
        // |------------|
        //      |--|
        // EXPECTED:
        // |----|--|----|
        ["2000-01-01..2000-01-10", "2000-01-04..2000-01-07"] | ["2000-01-01..2000-01-03", "2000-01-04..2000-01-07", "2000-01-08..2000-01-10"] | ""
        // INPUT:
        // |----|
        //         |----|
        // EXPECTED:
        // |----|  |----|
        ["2000-01-01..2000-01-04", "2000-01-07..2000-01-10"] | ["2000-01-01..2000-01-04", "2000-01-07..2000-01-10"]                           | ""
        // INPUT:
        // |----|
        //      |----|
        // EXPECTED:
        // |----|----|
        ["2000-01-01..2000-01-04", "2000-01-04..2000-01-07"] | ["2000-01-01..2000-01-03", "2000-01-04", "2000-01-05..2000-01-07"]             | ""
        ["2022-04-04..2022-04-05", "2022-04-05..2022-04-06"] | ["2022-04-04", "2022-04-05", "2022-04-06"]                                     | "overlap"

    }

    def "group subsequent days"() {

        when:
        final List<DateRange> groupSubsequentDays = DateRange.groupSubsequentDays(days)

        then:
        assertThat(groupSubsequentDays).containsExactlyElementsOf(ranges(expectedDateRanges))

        where:
        days                                                                                            | expectedDateRanges
        []                                                                                              | []
        [day("2000-01-01")]                                                                             | ["2000-01-01"]
        [day("2000-01-01"), day("2000-01-02")]                                                          | ["2000-01-01..2000-01-02"]
        [day("2000-01-01"), day("2000-01-03")]                                                          | ["2000-01-01", "2000-01-03"]
        [day("2000-01-01"), day("2000-01-03"), day("2000-01-05")]                                       | ["2000-01-01", "2000-01-03", "2000-01-05"]
        [day("2000-01-01"), day("2000-01-02"), day("2000-01-03")]                                       | ["2000-01-01..2000-01-03"]
        [day("2000-01-01"), day("2000-01-02"), day("2000-01-04"), day("2000-01-05")]                    | ["2000-01-01..2000-01-02", "2000-01-04..2000-01-05"]
        [day("2000-01-01"), day("2000-01-02"), day("2000-01-04"), day("2000-01-06"), day("2000-01-07")] | ["2000-01-01..2000-01-02", "2000-01-04", "2000-01-06..2000-01-07"]

    }

    def "merge"() {

        when:
        final List<DateRange> mergedDateRanges = DateRange.merge(ranges(dateRanges))

        then:
        assertThat(mergedDateRanges).containsExactlyElementsOf(ranges(expectedDateRanges))

        where:
        dateRanges                                           | expectedDateRanges                                   | comment
        []                                                   | []                                                   | ""
        ["2000-01-01"]                                       | ["2000-01-01"]                                       | ""
        ["2000-01-01..2000-01-03"]                           | ["2000-01-01..2000-01-03"]                           | ""
        ["2000-01-01", "2000-01-02"]                         | ["2000-01-01..2000-01-02"]                           | ""
        ["2000-01-01", "2000-01-02..2000-01-03"]             | ["2000-01-01..2000-01-03"]                           | ""
        ["2000-01-01..2000-01-02", "2000-01-02"]             | ["2000-01-01..2000-01-02"]                           | ""
        ["2000-01-01..2000-01-02", "2000-01-02..2000-01-03"] | ["2000-01-01..2000-01-03"]                           | ""
        ["2000-01-01..2000-01-02", "2000-01-03..2000-01-04"] | ["2000-01-01..2000-01-04"]                           | ""
        ["2000-01-01..2000-01-02", "2000-01-03..2000-01-07"] | ["2000-01-01..2000-01-07"]                           | ""
        ["2000-01-01..2000-01-02", "2000-01-04..2000-01-07"] | ["2000-01-01..2000-01-02", "2000-01-04..2000-01-07"] | ""
        ["2000-01-01..2000-01-04", "2000-01-03..2000-01-07"] | ["2000-01-01..2000-01-07"]                           | "overlap"
        ["2000-01-01..2000-01-04", "2000-01-01"]             | ["2000-01-01..2000-01-04"]                           | "overlap"
        ["2000-01-01..2000-01-04", "2000-01-03"]             | ["2000-01-01..2000-01-04"]                           | "overlap"
        ["2000-01-01..2000-01-04", "2000-01-04"]             | ["2000-01-01..2000-01-04"]                           | ""

    }

    def "find all gaps"() {

        when:
        final List<DateRange> gaps = DateRange.findAllGaps(ranges(dateRanges))

        then:
        assertThat(gaps).containsExactlyInAnyOrderElementsOf(ranges(expectedGaps))

        where:
        dateRanges                                           | expectedGaps               | comment
        []                                                   | []                         | ""
        ["2000-01-01"]                                       | []                         | "1 day"
        ["2000-01-01..2000-01-31"]                           | []                         | "1 month"
        ["2000-01-01.."]                                     | []                         | "infinite"

        ["2000-01-01", "2000-01-03"]                         | ["2000-01-02"]             | ""

        ["2000-01-01..2000-01-31", "2000-03-01"]             | ["2000-02-01..2000-02-29"] | ""
        ["2000-01-01..2000-01-31", "2000-03-01..2000-03-31"] | ["2000-02-01..2000-02-29"] | ""

        ["2000-01-01", "2000-01-03.."]                       | ["2000-01-02"]             | ""
        ["2000-01-01..2000-01-31", "2000-03-01.."]           | ["2000-02-01..2000-02-29"] | ""

        ["2000-01-01..", "2001-01-01.."]                     | []                         | "infinite"

    }

    def "intersect"() {

        given:
        final DateRange range1 = DateRange.parse(range1AsString)
        final DateRange range2 = DateRange.parse(range2AsString)

        when:
        final Optional<DateRange> intersection = range1.intersect(range2)

        then:
        assertThat(intersection).isEqualTo(expectedIntersection)

        where:
        range1AsString           | range2AsString           | expectedIntersection
        "2000-01-01"             | "2000-01-02"             | Optional.empty()
        "2000-01-02"             | "2000-01-01"             | Optional.empty()
        "2000-01-01"             | "2000-01-01"             | Optional.of(range("2000-01-01"))

        "2000-01-01..2000-01-05" | "2000-01-05..2000-01-08" | Optional.of(range("2000-01-05"))
        "2000-01-05..2000-01-08" | "2000-01-01..2000-01-05" | Optional.of(range("2000-01-05"))
        "2000-01-01..2000-01-05" | "2000-01-04..2000-01-08" | Optional.of(range("2000-01-04..2000-01-05"))
        "2000-01-04..2000-01-08" | "2000-01-01..2000-01-05" | Optional.of(range("2000-01-04..2000-01-05"))

        "2000-01-01"             | "2000-01-05.."           | Optional.empty()
        "2000-01-05.."           | "2000-01-01"             | Optional.empty()
        "2000-01-10"             | "2000-01-05.."           | Optional.of(range("2000-01-10"))
        "2000-01-05.."           | "2000-01-10"             | Optional.of(range("2000-01-10"))

        "2000-01-01..2000-01-05" | "2000-01-05.."           | Optional.of(range("2000-01-05"))
        "2000-01-05.."           | "2000-01-01..2000-01-05" | Optional.of(range("2000-01-05"))
        "2000-01-01..2000-01-05" | "2000-01-04.."           | Optional.of(range("2000-01-04..2000-01-05"))
        "2000-01-04.."           | "2000-01-01..2000-01-05" | Optional.of(range("2000-01-04..2000-01-05"))

        "2000-01-01.."           | "2000-01-04.."           | Optional.of(range("2000-01-04.."))
        "2000-01-04.."           | "2000-01-01.."           | Optional.of(range("2000-01-04.."))

    }

    def "as days"() {

        when:
        final List<LocalDate> days = dateRange.asDays()

        then:
        assertThat(days).containsExactlyElementsOf(expectedDays)

        where:
        dateRange                       | expectedDays
        range("2000-01-01")             | [day("2000-01-01")]
        range("2000-01-01..2000-01-05") | [day("2000-01-01"), day("2000-01-02"), day("2000-01-03"), day("2000-01-04"), day("2000-01-05")]

    }

    def "as months"() {

        when:
        final List<YearMonth> months = dateRange.asMonths()

        then:
        assertThat(months).containsExactlyElementsOf(expectedMonths)

        where:
        dateRange                       | expectedMonths
        range("2000-01-01")             | [month("2000-01")]
        range("2000-01-01..2000-01-31") | [month("2000-01")]
        range("2000-01-15..2000-01-31") | [month("2000-01")]
        range("2000-01-01..2000-02-01") | [month("2000-01"), month("2000-02")]
        range("2000-01-15..2000-02-01") | [month("2000-01"), month("2000-02")]
        range("2000-01-01..2000-05-31") | [month("2000-01"), month("2000-02"), month("2000-03"), month("2000-04"), month("2000-05")]

    }

    def "as text"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)

        when:
        final String displayString = range.asText()

        then:
        assertThat(displayString).isEqualTo(expectedDisplayString)

        where:
        rangeAsString            | expectedDisplayString
        "2000-01-01"             | "2000-01-01"
        "2000-01-01..2000-01-03" | "2000-01-01..2000-01-03"
        "2000-01-01.."           | "2000-01-01.."

    }

    def "split by temporal unit"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)

        when:
        final List<DateRange> splitRanges = range.splitByTemporalUnit(temporalUnit)

        then:
        assertThat(splitRanges).isEqualTo(ranges(expectedSplit))

        where:
        rangeAsString            | temporalUnit      | expectedSplit                                        | comment
        "2000-01-01"             | ChronoUnit.MONTHS | ["2000-01-01"]                                       | ""
        "2000-01-01"             | ChronoUnit.YEARS  | ["2000-01-01"]                                       | ""

        "2000-12-01..2000-12-31" | ChronoUnit.MONTHS | ["2000-12-01..2000-12-31"]                           | ""
        "2000-11-01..2000-12-31" | ChronoUnit.MONTHS | ["2000-11-01..2000-11-30", "2000-12-01..2000-12-31"] | ""
        "2000-12-15..2001-01-15" | ChronoUnit.MONTHS | ["2000-12-15..2000-12-31", "2001-01-01..2001-01-15"] | ""

        "2000-01-01..2000-01-03" | ChronoUnit.YEARS  | ["2000-01-01..2000-01-03"]                           | ""
        "2000-01-01..2001-01-03" | ChronoUnit.YEARS  | ["2000-01-01..2000-12-31", "2001-01-01..2001-01-03"] | ""
        "2000-01-01..2001-01-01" | ChronoUnit.YEARS  | ["2000-01-01..2000-12-31", "2001-01-01"]             | ""
        "2000-12-01..2001-01-01" | ChronoUnit.YEARS  | ["2000-12-01..2000-12-31", "2001-01-01"]             | ""
        "2000-12-31..2001-01-01" | ChronoUnit.YEARS  | ["2000-12-31", "2001-01-01"]                         | ""

    }

    def "split by day"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)

        when:
        final Set<DateRange> splitRanges = range.splitByDay(day(day))

        then:
        assertThat(splitRanges).containsExactlyInAnyOrderElementsOf(ranges(expectedSplit))

        where:
        rangeAsString            | day          | expectedSplit                            | comment
        "2000-01-02"             | "2000-01-01" | ["2000-01-02"]                           | ""
        "2000-01-02"             | "2000-01-02" | ["2000-01-02"]                           | ""
        "2000-01-02"             | "2000-01-03" | ["2000-01-02",]                          | ""

        "2000-01-02..2000-01-04" | "2000-01-01" | ["2000-01-02..2000-01-04"]               | ""
        "2000-01-02..2000-01-04" | "2000-01-02" | ["2000-01-02..2000-01-04"]               | ""
        "2000-01-02..2000-01-04" | "2000-01-03" | ["2000-01-02", "2000-01-03..2000-01-04"] | ""
        "2000-01-02..2000-01-04" | "2000-01-04" | ["2000-01-02..2000-01-03", "2000-01-04"] | ""
        "2000-01-02..2000-01-04" | "2000-01-05" | ["2000-01-02..2000-01-04",]              | ""

        "2000-01-02.."           | "2000-01-01" | ["2000-01-02.."]                         | ""
        "2000-01-02.."           | "2000-01-02" | ["2000-01-02.."]                         | ""
        "2000-01-02.."           | "2000-01-03" | ["2000-01-02", "2000-01-03.."]           | ""

    }

    def "split by range"() {

        given:
        final DateRange range = DateRange.parse(rangeAsString)
        final DateRange otherRange = DateRange.parse(otherRangeAsString)

        when:
        final Set<DateRange> splitRanges = range.splitByRange(otherRange)

        then:
        assertThat(splitRanges).containsExactlyInAnyOrderElementsOf(ranges(expectedSplit))

        where:
        rangeAsString            | otherRangeAsString       | expectedSplit                                                        | comment
        "2000-01-02"             | "2000-01-01"             | ["2000-01-02"]                                                       | ""
        "2000-01-02"             | "2000-01-02"             | ["2000-01-02"]                                                       | ""
        "2000-01-02"             | "2000-01-03"             | ["2000-01-02"]                                                       | ""

        "2000-01-02..2000-01-04" | "2000-01-01"             | ["2000-01-02..2000-01-04"]                                           | ""
        "2000-01-02..2000-01-04" | "2000-01-02"             | ["2000-01-02", "2000-01-03..2000-01-04"]                             | ""
        "2000-01-02..2000-01-04" | "2000-01-03"             | ["2000-01-02", "2000-01-03", "2000-01-04"]                           | ""
        "2000-01-02..2000-01-04" | "2000-01-04"             | ["2000-01-02..2000-01-03", "2000-01-04"]                             | ""
        "2000-01-02..2000-01-04" | "2000-01-05"             | ["2000-01-02..2000-01-04"]                                           | ""

        "2000-01-02.."           | "2000-01-01"             | ["2000-01-02.."]                                                     | ""
        "2000-01-02.."           | "2000-01-02"             | ["2000-01-02", "2000-01-03.."]                                       | ""
        "2000-01-02.."           | "2000-01-03"             | ["2000-01-02", "2000-01-03", "2000-01-04.."]                         | ""
        "2000-01-02.."           | "2000-01-04"             | ["2000-01-02..2000-01-03", "2000-01-04", "2000-01-05.."]             | ""

        "2000-01-02"             | "2000-01-01..2000-01-03" | ["2000-01-02"]                                                       | ""
        "2000-01-02"             | "2000-01-02..2000-01-03" | ["2000-01-02"]                                                       | ""
        "2000-01-02"             | "2000-01-03..2000-01-03" | ["2000-01-02"]                                                       | ""

        "2000-01-03..2000-01-06" | "2000-01-01..2000-01-02" | ["2000-01-03..2000-01-06"]                                           | ""
        "2000-01-03..2000-01-06" | "2000-01-01..2000-01-03" | ["2000-01-03", "2000-01-04..2000-01-06"]                             | ""
        "2000-01-03..2000-01-06" | "2000-01-01..2000-01-04" | ["2000-01-03..2000-01-04", "2000-01-05..2000-01-06"]                 | ""
        "2000-01-03..2000-01-06" | "2000-01-03..2000-01-04" | ["2000-01-03..2000-01-04", "2000-01-05..2000-01-06"]                 | ""
        "2000-01-03..2000-01-06" | "2000-01-04..2000-01-05" | ["2000-01-03", "2000-01-04..2000-01-05", "2000-01-06"]               | ""
        "2000-01-03..2000-01-06" | "2000-01-05..2000-01-06" | ["2000-01-03..2000-01-04", "2000-01-05..2000-01-06"]                 | ""
        "2000-01-03..2000-01-06" | "2000-01-05..2000-01-08" | ["2000-01-03..2000-01-04", "2000-01-05..2000-01-06"]                 | ""
        "2000-01-03..2000-01-06" | "2000-01-06..2000-01-08" | ["2000-01-03..2000-01-05", "2000-01-06"]                             | ""
        "2000-01-03..2000-01-06" | "2000-01-07..2000-01-08" | ["2000-01-03..2000-01-06"]                                           | ""

        "2000-01-03.."           | "2000-01-01..2000-01-02" | ["2000-01-03.."]                                                     | ""
        "2000-01-03.."           | "2000-01-02..2000-01-03" | ["2000-01-03", "2000-01-04.."]                                       | ""
        "2000-01-03.."           | "2000-01-04..2000-01-05" | ["2000-01-03", "2000-01-04..2000-01-05", "2000-01-06.."]             | ""
        "2000-01-03.."           | "2000-01-05..2000-01-06" | ["2000-01-03..2000-01-04", "2000-01-05..2000-01-06", "2000-01-07.."] | ""

        "2000-01-02"             | "2000-01-01.."           | ["2000-01-02"]                                                       | ""
        "2000-01-02"             | "2000-01-02.."           | ["2000-01-02"]                                                       | ""
        "2000-01-02"             | "2000-01-03.."           | ["2000-01-02"]                                                       | ""

        "2000-01-03..2000-01-06" | "2000-01-01.."           | ["2000-01-03..2000-01-06"]                                           | ""
        "2000-01-03..2000-01-06" | "2000-01-03.."           | ["2000-01-03..2000-01-06"]                                           | ""
        "2000-01-03..2000-01-06" | "2000-01-05.."           | ["2000-01-03..2000-01-04", "2000-01-05..2000-01-06"]                 | ""
        "2000-01-03..2000-01-06" | "2000-01-06.."           | ["2000-01-03..2000-01-05", "2000-01-06"]                             | ""
        "2000-01-03..2000-01-06" | "2000-01-07.."           | ["2000-01-03..2000-01-06"]                                           | ""

        "2000-01-02.."           | "2000-01-01.."           | ["2000-01-02.."]                                                     | ""
        "2000-01-02.."           | "2000-01-02.."           | ["2000-01-02.."]                                                     | ""
        "2000-01-02.."           | "2000-01-03.."           | ["2000-01-02", "2000-01-03.."]                                       | ""

    }

    def "subtract1"() {

        given:
        final DateRange minuend = DateRange.parse(minuendAsString)
        final DateRange subtrahend = DateRange.parse(subtrahendAsString)

        when:
        final List<DateRange> difference = minuend.subtract(subtrahend)

        then:
        assertThat(difference).isEqualTo(ranges(expectedDifference))

        where:
        minuendAsString          | subtrahendAsString       | expectedDifference                                   | comment
        "2000-01-01"             | "2000-01-01"             | []                                                   | ""
        "2000-01-01"             | "2000-01-02"             | ["2000-01-01"]                                       | ""
        "2000-01-01"             | "1999-01-01.."           | []                                                   | ""
        "2000-01-01"             | "2000-01-02.."           | ["2000-01-01"]                                       | ""

        "2000-12-01..2000-12-31" | "2000-01-02"             | ["2000-12-01..2000-12-31"]                           | ""
        "2000-01-01..2000-12-31" | "2000-01-02"             | ["2000-01-01", "2000-01-03..2000-12-31"]             | ""
        "2000-01-01.."           | "2000-01-02"             | ["2000-01-01", "2000-01-03.."]                       | ""

        "2000-01-01..2000-01-06" | "2000-01-03..2000-01-04" | ["2000-01-01..2000-01-02", "2000-01-05..2000-01-06"] | ""
        "2000-01-01..2000-01-06" | "1999-01-01..2000-01-04" | ["2000-01-05..2000-01-06"]                           | ""
        "2000-01-01..2000-01-06" | "2000-01-03..2001-01-01" | ["2000-01-01..2000-01-02"]                           | ""
        "2000-01-01..2000-01-06" | "1999-01-01..2001-01-01" | []                                                   | ""

        "2000-01-02.."           | "2000-01-01.."           | []                                                   | ""
        "2000-01-02.."           | "2000-01-02.."           | []                                                   | ""
        "2000-01-02.."           | "2000-01-03.."           | ["2000-01-02"]                                       | ""

        "2000-01-02"             | "2000-01-01.."           | []                                                   | ""
        "2000-01-02"             | "2000-01-02.."           | []                                                   | ""
        "2000-01-02"             | "2000-01-03.."           | ["2000-01-02"]                                       | ""

        "2000-01-02..2000-01-06" | "2000-01-01.."           | []                                                   | ""
        "2000-01-02..2000-01-06" | "2000-01-02.."           | []                                                   | ""
        "2000-01-02..2000-01-06" | "2000-01-03.."           | ["2000-01-02"]                                       | ""
        "2000-01-02..2000-01-06" | "2000-01-04.."           | ["2000-01-02..2000-01-03"]                           | ""

    }

    def "subtract"() {

        given:
        final DateRange minuend = DateRange.parse(minuendAsString)
        final List<DateRange> subtrahends = ranges(subtrahendsAsStrings)

        when:
        final List<DateRange> difference = minuend.subtract(subtrahends)

        then:
        assertThat(difference).isEqualTo(ranges(expectedDifference))

        where:
        minuendAsString          | subtrahendsAsStrings                                 | expectedDifference                                                             | comment
        "2000-01-01"             | ["2000-01-01"]                                       | []                                                                             | ""
        "2000-01-01"             | ["2000-01-02"]                                       | ["2000-01-01"]                                                                 | ""
        "2000-01-01"             | ["1999-01-01.."]                                     | []                                                                             | ""
        "2000-01-01"             | ["2000-01-02.."]                                     | ["2000-01-01"]                                                                 | ""

        "2000-12-01..2000-12-31" | ["2000-01-02"]                                       | ["2000-12-01..2000-12-31"]                                                     | ""
        "2000-01-01..2000-12-31" | ["2000-01-02"]                                       | ["2000-01-01", "2000-01-03..2000-12-31"]                                       | ""
        "2000-01-01.."           | ["2000-01-02"]                                       | ["2000-01-01", "2000-01-03.."]                                                 | ""

        "2000-01-01..2000-01-06" | ["2000-01-03..2000-01-04"]                           | ["2000-01-01..2000-01-02", "2000-01-05..2000-01-06"]                           | ""
        "2000-01-01..2000-01-06" | ["1999-01-01..2000-01-04"]                           | ["2000-01-05..2000-01-06"]                                                     | ""
        "2000-01-01..2000-01-06" | ["2000-01-03..2001-01-01"]                           | ["2000-01-01..2000-01-02"]                                                     | ""
        "2000-01-01..2000-01-06" | ["1999-01-01..2001-01-01"]                           | []                                                                             | ""

        "2000-01-01..2000-01-10" | ["2000-01-03..2000-01-04", "2000-01-07..2000-01-08"] | ["2000-01-01..2000-01-02", "2000-01-05..2000-01-06", "2000-01-09..2000-01-10"] | ""
        "2000-01-01..2000-01-10" | ["2000-01-03..2000-01-05", "2000-01-06..2000-01-08"] | ["2000-01-01..2000-01-02", "2000-01-09..2000-01-10"]                           | ""
        "2000-01-01..2000-01-10" | ["2000-01-03..2000-01-06", "2000-01-06..2000-01-08"] | ["2000-01-01..2000-01-02", "2000-01-09..2000-01-10"]                           | ""
        "2000-01-01..2000-01-10" | ["2000-01-03..2000-01-07", "2000-01-06..2000-01-08"] | ["2000-01-01..2000-01-02", "2000-01-09..2000-01-10"]                           | ""

        "2000-01-01..2000-01-10" | ["2000-01-01..2000-01-04", "2000-01-07..2000-01-08"] | ["2000-01-05..2000-01-06", "2000-01-09..2000-01-10"]                           | ""
        "2000-01-01..2000-01-10" | ["1999-01-01..2000-01-04", "2000-01-07..2000-01-08"] | ["2000-01-05..2000-01-06", "2000-01-09..2000-01-10"]                           | ""
        "2000-01-01..2000-01-10" | ["2000-01-03..2000-01-04", "2000-01-07..2001-01-01"] | ["2000-01-01..2000-01-02", "2000-01-05..2000-01-06"]                           | ""
        "2000-01-01..2000-01-10" | ["1999-01-01..2000-01-04", "2000-01-07..2001-01-01"] | ["2000-01-05..2000-01-06"]                                                     | ""
        "2000-01-01..2000-01-10" | ["1999-01-01..2000-01-05", "2000-01-06..2001-01-01"] | []                                                                             | ""

    }

    def "sort"() {

        given:
        final List<DateRange> unsortedRanges = ranges(rangesAsStrings)

        when:
        final List<DateRange> sortedRanges = DateRange.sort(unsortedRanges)

        then:
        assertThat(sortedRanges).containsExactlyElementsOf(ranges(expectedSort))

        where:
        rangesAsStrings                                          | expectedSort                                             | comment
        ["2000-01-01"]                                           | ["2000-01-01"]                                           | ""
        ["2000-01-01.."]                                         | ["2000-01-01.."]                                         | ""
        ["2000-01-01..2000-12-31"]                               | ["2000-01-01..2000-12-31"]                               | ""

        ["2000-01-01", "2000-01-02"]                             | ["2000-01-01", "2000-01-02"]                             | ""
        ["2000-01-02", "2000-01-01"]                             | ["2000-01-01", "2000-01-02"]                             | ""

        ["2000-01-01..", "2000-01-02.."]                         | ["2000-01-01..", "2000-01-02.."]                         | ""
        ["2000-01-02..", "2000-01-01.."]                         | ["2000-01-01..", "2000-01-02.."]                         | ""

        ["2000-01-01..2000-12-31", "2000-01-02..2000-12-31"]     | ["2000-01-01..2000-12-31", "2000-01-02..2000-12-31"]     | ""
        ["2000-01-02..2000-12-31", "2000-01-01..2000-12-31"]     | ["2000-01-01..2000-12-31", "2000-01-02..2000-12-31"]     | ""
        ["2000-01-01..2000-12-30", "2000-01-01..2000-12-31"]     | ["2000-01-01..2000-12-30", "2000-01-01..2000-12-31"]     | ""
        ["2000-01-01..2000-12-31", "2000-01-01..2000-12-30"]     | ["2000-01-01..2000-12-30", "2000-01-01..2000-12-31"]     | ""

        ["2000-01-01", "2000-01-01.."]                           | ["2000-01-01", "2000-01-01.."]                           | ""
        ["2000-01-01..", "2000-01-01"]                           | ["2000-01-01", "2000-01-01.."]                           | ""
        ["2000-01-01", "2000-01-01..2000-12-31"]                 | ["2000-01-01", "2000-01-01..2000-12-31"]                 | ""
        ["2000-01-01..2000-12-31", "2000-01-01"]                 | ["2000-01-01", "2000-01-01..2000-12-31"]                 | ""
        ["2000-01-01..2000-12-31", "2000-01-01.."]               | ["2000-01-01..2000-12-31", "2000-01-01.."]               | ""
        ["2000-01-01..", "2000-01-01..2000-12-31"]               | ["2000-01-01..2000-12-31", "2000-01-01.."]               | ""

        ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ""
        ["2000-01-01", "2000-01-01..", "2000-01-01..2000-12-31"] | ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ""
        ["2000-01-01..2000-12-31", "2000-01-01", "2000-01-01.."] | ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ""
        ["2000-01-01..2000-12-31", "2000-01-01..", "2000-01-01"] | ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ""
        ["2000-01-01..", "2000-01-01", "2000-01-01..2000-12-31"] | ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ""
        ["2000-01-01..", "2000-01-01..2000-12-31", "2000-01-01"] | ["2000-01-01", "2000-01-01..2000-12-31", "2000-01-01.."] | ""

    }


}